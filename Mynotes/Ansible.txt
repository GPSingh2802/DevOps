
# Ansible
# Infrastructure as a Code
# Automation of IT Operations (Build, Deploy and Manage)
 - Faster, Better, Cheaper (Time to Market, No Configuration Drift(reliable), Efficient)
 - Configuration Drift
 - CM tools DSLs (Domain Specific Language) easier than writing Scripts
 - CM tools have pre-defined workflows

# Ansible - Push/Agentless
# Ansible written in Python

# Push vs Pull
==========================================
Push is fully syncronse vs Pull is Scalable

# Why Ansible
==========================================
- Simple: Use YAML
- Agent-less: SSH and WinRM (TCP5985/5986)
- Accessible:
- Powerful: Ad-hoc Commands

# Installation
==========================================
# Sudo yum Install python python-devel python-pip ansible
# Password-less Authentication

#

Traditional languages  Puppet                        Chef                         Ansible
Packages               Modules                       Cookbooks                    Roles
Codefiles              Manifest(.pp)                 Recipes(.rb)                 Playbook(.YAML)
Function               Resources                     Resources                    Modules
					             facter (facts) (node)         OHAI (Attributes) (node)     Setup (facts)
                       forge.puppet.com              chef supermarket             Galaxy.Ansible.com
                       (for community Modules)       (for community cookbooks)    (for community Roles)

#Commands
==========================================
 - Ansible --Version
 - cat /etc/ansible/ansible.cfg (#File with high level Ansible configuration)
 - cat /etc/ansible/hosts (#Inventory File)
 - Ansible -m ping all (# m is for modules)
 - Ansible -m ping "node group" (for particular group)
 - Ansible "Node group" -m copy -a "src=test.txt dest=/temp/test.txt" (#Adhoc Commands)
 - Ansible-Playbook "Playbook name"


 # Playbook (Can have multiple plays)
 ===========================================
 ---                                    # Playbook starts with three dash
 - Hosts: nodes                         # Play starts with hosts the play is supposed to be executed
   remote_users: edureka                #
   become: yes                          # become diffent user than the one logged in. Privilege escalation
   become_method: sudo
   connection: SSH
   gather_facts: yes
   task:                                # Task. A play can have multiple tasks, executed in order
   - name: install tree Commands
     yum:
      name: tree
      state: latest

  - Hosts: nodes
  remote_users: edureka
  become: yes (#to become Sudo)
  become_method: sudo
  connection: SSH
  gather_facts: yes
  task:
  - name: install telnet Commands
  yum:
  name: telnet
  state: latest
