
=====================================================================
# Docker
# Origin from transportation Container
# Co-relation between transport/shipping Container and IT industry Container
# Light weight and do not require any license

# Challenges with Shipping transportation
 - Which mode of transport to use?
 - Skilled worker for loading/unloading good
# Solution : Standardisation of goods as Container

# Challenges with system/software Configuration
 - Which system should be used for software services
 - Are employees Skilled/trained enough to handle the software with required Configuration
# software should work same in Dev, UAT, Prod, Stand-alone, public or Private cloud

=====================================================================
# Node is compute machine (Physical, VM, public or Private cloud)
# Docker - A shipping Container for Node
 - Developers: Build Once, Run Anywhere
 - Operations: Configure Once, Run Anywhere

 # Monolithic vs Micro services Architecture
  - One big code, changes slow, services tightly coupled, require big servers
  - Application broken down to small services ( Rapid update)
  - Small services interact with each other via API (Small Servers and distributed Architecture)

=====================================================================
# Docker vs Virtual Machine
- kernel/OS Level Virtualisation  Hardware Level Virtualisation

# HyperVisors: esx/esxi/hyperV/Xen (Hardware Level Virtualisation)
# Docker: Virtualisation of Kernel (is Process with PID)

# Docker file -> Docker Images -> Docker Containers
# Docker hub - Github for Docker Images

# Docker Isolation: NameSpaces and cGroups
# Volume/Storage is non-persistent or ephemeral

# Docker Architecture: https://docs.docker.com/engine/docker-overview/

# Docker version
 - CE: Community Edition
 - EE: Enterprise Edition

 # Docker File: https://docs.docker.com/engine/reference/builder/
 # Docker demeon/Docker Engine/docker runtime

=====================================================================
# Commands
 - # https://get.docker.com/
 - # This script is meant
 for quick & easy install via:
 - #   $ curl -fsSL get.docker.com -o get-docker.sh
 - #   $ sh get-docker.sh
 - sudo yum install Docker
 - docker help
 - docker version
 - docker Images                       #Available local doc Images
 - docker search Apache                #Search image in Docker hub
 - docker pull ubuntu                  #Getting images from docker hub
 - docker ps(Container ls)             #running Container
 - docker ps(Container ls)-a           #running Container in past
 - docker run -itd ubuntu              #Starting Container (interactive, terminal, detached)
 - docker history ubuntu
 - docker attach                       #Connecting to Container
 - exit or (ctrl+P+Q)
 - docker rm "Container:ID/name"       #Remove Container
 - docker rmi "Image:tsg"
 - docker run -itd -name NAME ubuntu   #Naming Container
 - docker stop "Container:ID or name"  #Stopping Container
 - docker start "Container:ID or name" #Starting Container
 - docker inspect "Image or Container:ID or name"
 - docker info                         #Infomation of docker host
 - docker Container help               #docker help
 - docker cp "Container:Source path"   #docker copy
 - docker run -itd --name=Name1 -v /home/vagrant/Myapp:/tmp/Myapp (Hostpath:ClientPath)
 - docker run -itd --name=MyApp3 -v /Users/GP/Desktop/MyApp:/tmp ubuntu
 - docker build -t "Image name:Tag" .
 - docker pull
 - docker push


=====================================================================
 # https://www.katacoda.com/courses/docker
 # https://labs.play-with-docker.com/
