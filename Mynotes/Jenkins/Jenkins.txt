
# Jenkins: Process of automatic the building and testing of code each time one of the team member commits changes to version control
# software development Life Cycle - Design -> Code/develop -> Testing
# Two Versions: Open Source and Enterprise Version (Cloudbees)
# Acts like mother board

# CI Definition (By Martin Fowler): Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible. Many teams find that this approach leads to significantly reduced integration problems and allows a team to develop cohesive software more rapidly.

# CI tools Advantage
 - Improve Quality:
 - Increased Productivity
 - Reduce Risk: Human errors

=================================================
# Installation/configuration steps for Jenkins:
 1. Install Java
 2. Install Jenkins (apt-get/yum/exe package from https://jenkins.io/download/)
 3. java -jar jenkins.war
 4. access Jenkins on port 8080 (IPaddress:8080 or hostname:8080)
 5. Copy the initial admin password and initiate your Jenkins instance

=================================================
# Security
# 3 A's of Security
 - A: Authentication
 - A: Authorisation
 - A: Auditing/Accountability

=================================================
# Building Jobs/Pipeline
 - Jenkins Color codes
      Blue  - Success
      Red   - Failure
      Grey  - either "not run ever" or "last run was abruptly stopped"
# Job vs Build
  Job   = Pipeline
  Build = each iteration of a Job
** Config file in Jenkins (linux): /var/lib/jenkins/config.xml (jenkins.xml)

 =================================================
# Jenkins Slaves -
          1. Resource utilization
          2. Multiple Platform support
          3. Parallel Execution
 =================================================
# Parameterised Builds
# Upstream/Downstream project
# Automated ways to trigger a job/Hooks (Build Trigger)
# Build pipeline plugin/view
# Pipeline as code (Jenkinsfile)

 =================================================
# A sample Maven build in J
  Install Maven in Global Tools configuration

 =================================================
# Sample Webhook URL:
curl http://172.28.28.145/job/chef-job/build?token=edureka
file:///home/myrepos/gitrepo
repo/.git/hooks/post-commit.sample
file:///tmp/myrepo

=========================================
java based projects:
    Maven (POM.XML)
    Ant (Build.xml)
    Gradle (Build.xml)
mvn compile
mvn test
mvn package
.Net Project
    MSbuild
    NAnt

=========================================
#Jenkinsfile Example for Pipeline-as-Code
=========================================
pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
          echo "Building......!"
      }
    }
    stage('Test') {
      steps {
          echo "Testing......!"
      }
    }
    stage('Package') {
      steps {
          echo "Packaging......!"
      }
    }
  }
}
=========================================
# Pipeline-as-Code references:
https://jenkins.io/doc/pipeline/tour/hello-world/
https://jenkins.io/doc/book/pipeline-as-code/
=========================================
# Things to read:
# Edureka Blog:
https://www.edureka.co/blog/what-is-jenkins/
https://www.edureka.co/blog/interview-questions/jenkins-interview-questions/

Reference: https://martinfowler.com/articles/continuousIntegration.html
=========================================
